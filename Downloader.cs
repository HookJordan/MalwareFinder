using System;
using System.IO;
using System.Net;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Threading;

namespace scraper
{
    class Downloader
    {
        private int maxThreads;
        private string outputDirectory;

        // Safe defaults
        public Downloader() {
            this.maxThreads = 2;
            this.outputDirectory = Path.GetTempPath() + "/scraper";

            this.init();
        }

        public Downloader(string outputDirectory, int threads = 2) {
            this.maxThreads = threads;
            this.outputDirectory = outputDirectory;
        }

        private void init() {
            if(!Directory.Exists(outputDirectory)) {
                Directory.CreateDirectory(outputDirectory);
            }
        }

        public void scrapeSamples() {
            // Declare our sources and parsers
            SampleParser[] parsers = { new Malc0deParser(), new VXVaultParser(), new URLQueryParser() };
            string[] sources = new string[] { "http://malc0de.com/rss", "http://vxvault.net/URL_List.php", "http://urlquery.net" };
            string sourceData = null;
            List<string> targetSamples = new List<string>();
            
            // Scrape all of the sources for samples to download
            using(WebClient wc = new WebClient()) {
                for(int i = 0; i < sources.Length; i++) {
                    Console.WriteLine("Scraping for data from source : {0:0}", sources[i]);

                    // RAW scrape from source
                    sourceData = wc.DownloadString(sources[i]);

                    // Parse raw data and append to our samples list
                    targetSamples.AddRange(parsers[i].parseSampleURLs(sourceData));
                }
            }

            List<Thread> threadPool = new List<Thread>();

            // While there are samples to download OR samples currently downloading
            while(targetSamples.Count > 0 || threadPool.Count > 0) {

                // While there is room in the threadpool and more samples to download
                while(threadPool.Count < this.maxThreads && targetSamples.Count > 0) {
                    var downloaderThread = new Thread(() => {
                        // Code executed here will be running in a new thread
                        string sample; 

                        lock(targetSamples) {
                            // Ensure there is samples to download still
                            if(targetSamples.Count == 0) { return; }

                            // Get the next sample URL
                            sample = targetSamples[0];
                            targetSamples.RemoveAt(0);
                        }
                        
                        // Extract the file name from the URL and determine the save file path
                        string[] sampleParts = sample.Split('/');
                        string targetPath = this.outputDirectory + "/" + sampleParts[sampleParts.Length - 1];

                        try {
                            // Attempt to download the file
                            Console.WriteLine("Downloading {0:0} to {1:0}", sample, targetPath);

                            using(WebClient wc = new WebClient()) {
                                wc.DownloadFile(sample, targetPath);
                            }

                            // TODO: 
                            // Additional Processing can occur here
                            // Such as renaming file to SHA-1 hash? 
                            // Sorting by file type (Executables, scripts, etc)

                        } catch (Exception e) {
                            Console.WriteLine(e.Message);
                        }
                    });

                    // Add thread to pool and start
                    threadPool.Add(downloaderThread);
                    downloaderThread.Start();
                }

                // Check for threads that have finished executing
                var deadThread = threadPool.Find(t => t.ThreadState == ThreadState.Stopped);

                while(deadThread != null) {
                    threadPool.Remove(deadThread);
                    deadThread = threadPool.Find(t => t.ThreadState == ThreadState.Stopped);
                }
            }
        }
    }

    abstract class SampleParser {
        public abstract List<string> parseSampleURLs(string data);

        public string HTTP(string url)
        {
            // add http to string if required 
            if (!url.StartsWith("http://") || url.StartsWith("https://"))
            {
                url = "http://" + url;
            }

            return url;
        }

        public List<string> GetAllBetween(string text, string start, string end)
        {
            List<string> matches = new List<string>();
            // create regex expression 
            string regex = string.Format("{0}(.*?){1}", Regex.Escape(start), Regex.Escape(end));

            foreach(Match m in Regex.Matches(text, regex, RegexOptions.Singleline)) {
                matches.Add(m.Groups[1].Value);
            }

            // return matches as a list 
            return matches;
        }
    }
class Malc0deParser : SampleParser {
        public override List<string> parseSampleURLs(string data) {
            List<string> results = new List<string>();
            string[] split = data.Split('\n');
            foreach(string line in split)
            {
                // check the XML element for the url 
                if(line.StartsWith("<description>URL:"))
                {
                    // Extract the URL 
                    var sample = line.Split(',')[0];
                    sample = sample.Remove(0, sample.IndexOf(' ')).Trim(); 

                    // validate length of url to make sure valid data is there 
                    if(sample.Length > 6)
                    {
                        // add http to the sample url is required 
                        sample = HTTP(sample);

                        results.Add(sample);
                    }
                }
            }
            return results;
        }
    }

    class VXVaultParser : SampleParser {
        public override List<string> parseSampleURLs(string data) {
            List<string> results = new List<string>();
            string[] links = data.Split('\n');
            foreach (string link in links)
            {
                // validate data in string 
                if (link.Length > 6)
                {
                    // add http if required 
                    string sample = HTTP(link);

                    // replace \r that may have downloaded as well from plain text file 
                    sample = sample.Replace("\r", "");

                    results.Add(sample);
                }
            }

            return results;
        }
    }

    class URLQueryParser : SampleParser {
        public override List<string> parseSampleURLs(string data) {
            List<string> results = new List<string>();

            // pull all links from html page 
            List<string> LinksFound = GetAllBetween(data, "<a", "</a>"); 

            // loop throug each link 
            foreach(string link in LinksFound)
            {
                 // sample links can be found in the title element 
                if(link.StartsWith("title="))
                {
                    // get the element between the ' quotes (so the title value) 
                    string sample = link.Split('\'')[1].Trim();

                    // add http if required 
                    sample = HTTP(sample); 

                    results.Add(sample);
                }
            }

            return results;
        }
    }
}
