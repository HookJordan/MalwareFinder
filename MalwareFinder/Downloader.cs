using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace MalwareFinder
{
    class Downloader
    {

        // Properties 
        public string WorkingDirectory { get; private set; }
        public int DownloaderCap { get; private set; }
        

        public Downloader(string workingDir, int downloaders)
        {
            // Pass in settings 
            WorkingDirectory = workingDir;
            DownloaderCap = downloaders;
        }

        private List<string> loadHistory()
        {
            // init the list to hold the history 
            List<string> History = new List<string>();

            // only try loading history if it exists 
            if (File.Exists(WorkingDirectory + "history.dat"))
            {
                Console.WriteLine("Attempting to load history.");

                try
                {
                    // Create a stream reader on the history file
                    using (StreamReader sr = new StreamReader(WorkingDirectory + "history.dat"))
                    {
                        // While there is content left, continue reading 
                        while(sr.Peek() > 0)
                        {
                            // read the next line 
                            string sample = sr.ReadLine(); 

                            // validate valid link 
                            if(sample.Length > 3)
                            {
                                // add to list 
                                History.Add(sample); 
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Console.WriteLine("Unable to load history, file in use or corrupt.");
                    Debug.WriteLine(ex.Message);  
                }
            }
            else
            {
                Console.WriteLine("Missing History.dat, string fresh download."); 
            }

            // return empty list or loaded history 
            return History;
        }

        public void saveHistory(List<string> History)
        {
            try
            {
                Console.WriteLine("Saving history of samples."); 
                // Create a new reader on the file 
                using (StreamWriter sw = new StreamWriter(WorkingDirectory + "history.dat"))
                {
                    // loop throug all links in the sample history 
                    foreach(string sample in History)
                    {
                        // write each one to the file 
                        sw.WriteLine(sample); 
                    }
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine("Unable to save history.dat, file may be in use or permission denied.");
                Debug.WriteLine(ex.Message); 
            }
        }

        public void GetSamples()
        {
            // stats for the end 
            int TotalSamples = 0, SamplesFailed = 0; 

            // Create a list to store all samples in 
            List<string> Samples = new List<string>();
            List<string> History = loadHistory(); 

            // Links to all the different sources 
            string[] sources = new string[] { "http://malc0de.com/rss", "http://vxvault.net/URL_List.php", "http://urlquery.net" };
            string data = string.Empty;

            // Create a downloader to download the lists with 
            WebClient sourceDownloader = new WebClient();
            sourceDownloader.Proxy = null;

            Console.WriteLine("Downloading updates from sources."); 

            // Loop through each source 
            for(int i = 0; i < sources.Length; i++)
            {
                // Download the list or page with the list of samples 
                data = sourceDownloader.DownloadString(sources[i]);

                // based on the source, run the appropriate method to parse / extract samples 
                switch (i)
                {
                    case 0: // Malc0de 
                        SampleParser.Malc0de(data, ref Samples, ref History); 
                        break;
                    case 1: // VXVault 
                        SampleParser.VXVault(data, ref Samples, ref History); 
                        break;
                    case 2: // URLQuery 
                        SampleParser.URLQuery(data, ref Samples, ref History); 
                        break; 
                    default:
                        Console.WriteLine("{0} is an unsupported source.", sources[i]); 
                        break;
                }

            }

            // store total sample count before we download them 
            TotalSamples = Samples.Count; 

            // All sources are parsed
            // Setup downloader threads to download the rest of the samples 
            List<Thread> ThreadPool = new List<Thread>(); 
           
            // while there are smaples left to download 
            while(Samples.Count > 0 || ThreadPool.Count > 0)
            {
                // room for more threads 
                // and there are more samples to download... 
                while(ThreadPool.Count < DownloaderCap && Samples.Count > 0)
                {
                    var downloadThread = new Thread(() =>
                    {
                        string sample;
                        lock(Samples)
                        {
                            // pull the sample 
                            sample = Samples[0];
                            Samples.RemoveAt(0);
                        }

                        try
                        {
                            // create a web client to download with 
                            WebClient wc = new WebClient();

                            // create a temp file to download to 
                            string tmp = Path.GetTempFileName();

                            Console.WriteLine("Downloading sample {0}", sample); 

                            // Download the sample to the temp path 
                            wc.DownloadFile(sample, tmp);

                            // calc md5 of temp file 
                            string fileHash = checkMD5(tmp);

                            // if sample already exists, discard of it 
                            if (File.Exists(WorkingDirectory + fileHash + ".bin"))
                            {
                                Console.WriteLine("Duplicate: {0}.bin deleted.");
                                File.Delete(tmp);
                            }
                            else
                            {

                                // move tmp file to the working dir 
                                File.Move(tmp, WorkingDirectory + fileHash + ".bin"); // rename to hash.bin 

                                Console.WriteLine("Sample: {0}.bin created.", fileHash);
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);

                            Console.WriteLine(ex.Message); 

                            // failed sample 
                            SamplesFailed++; 
                        }
                    });

                    // add thread to list
                    ThreadPool.Add(downloadThread);

                    // start the thread 
                    downloadThread.Start(); 
                }

                // check for dead theads 
                var deadThread = ThreadPool.FirstOrDefault(t => t.ThreadState == System.Threading.ThreadState.Stopped); 

                // while there are dead threads 
                while(deadThread != null)
                {
                    // remove them 
                    ThreadPool.Remove(deadThread); 

                    // check for more 
                    deadThread = ThreadPool.FirstOrDefault(t => t.ThreadState == System.Threading.ThreadState.Stopped);
                }
            }

            // Display final statistics 
            Console.WriteLine("{0} Samples were downloaded.", TotalSamples - SamplesFailed);
            Console.WriteLine("{0} Samples failed to download.", SamplesFailed);

            // save history 
            saveHistory(History);
        }

        private static string checkMD5(string filename)
        {
            using (var md5 = new MD5CryptoServiceProvider())
            {
                var buffer = md5.ComputeHash(File.ReadAllBytes(filename));
                var sb = new StringBuilder();
                for (int i = 0; i < buffer.Length; i++)
                {
                    sb.Append(buffer[i].ToString("x2"));
                }
                return sb.ToString() + ".bin";
            }
        }
    }

    class SampleParser
    {
        public static void Malc0de(string data, ref List<string> Samples, ref List<string> History)
        {
            Console.WriteLine("Pulling Malc0de samples.");

            // store the number of samples here 
            int count = 0;

            // Split the data by lines 
            string[] split = data.Split('\n');
            
            // loop through each line in the split 
            foreach(string line in split)
            {
                // check the XML element for the url 
                if(line.StartsWith("<description>URL:"))
                {
                    // Extract the URL 
                    var sample = line.Split(',')[0];
                    sample = sample.Remove(0, sample.IndexOf(' ')).Trim(); 

                    // validate length of url to make sure valid data is there 
                    if(sample.Length > 6)
                    {
                        // add http to the sample url is required 
                        sample = HTTP(sample);

                        // validate this is a new sample 
                        if(!History.Contains(sample))
                        {
                            // It's new so add it 
                            History.Add(sample);
                            Samples.Add(sample);

                            // increase number of fresh samples found 
                            count++; 
                        }
                    }
                }
            }

            // End of parse 
            Console.WriteLine("{0} Samples were pulled from Malc0de.", count); 
        }

        public static void VXVault(string data, ref List<string> Samples, ref List<string> History)
        {
            Console.WriteLine("Pulling VXVault samples.");

            // count samples
            int count = 0;

            // Split the links 
            string[] links = data.Split('\n');
            foreach (string link in links)
            {
                // validate data in string 
                if (link.Length > 6)
                {
                    // add http if required 
                    string sample = HTTP(link);

                    // replace \r that may have downloaded as well from plain text file 
                    sample = sample.Replace("\r", "");

                    // validate this is a new link 
                    if (!History.Contains(sample))
                    {
                        // add the sample to the lists 
                        History.Add(sample);
                        Samples.Add(sample);

                        // increase fresh sample count 
                        count++;
                    }
                }
            }

            // display samples found 
            // end of parse 
            Console.WriteLine("{0} Samples were pulled from VXVault.", count);
        }

        public static void URLQuery(string data, ref List<string> Samples, ref List<string> History)
        {
            Console.WriteLine("Pulling URLQuery samples.");

            // count fresh samples
            int count = 0; 

            // pull all links from html page 
            List<string> LinksFound = GetAllBetween(data, "<a", "</a>"); 

            // loop throug each link 
            foreach(string link in LinksFound)
            {
                // sample links can be found in the title element 
                if(link.StartsWith("title="))
                {
                    // get the element between the ' quotes (so the title value) 
                    string sample = link.Split('\'')[1].Trim();

                    // add http if required 
                    sample = HTTP(sample); 

                    // determine if sample is fresh 
                    if(!History.Contains(sample))
                    {
                        // add sample 
                        History.Add(sample);
                        Samples.Add(sample);

                        // increase fresh count
                        count++; 
                    }
                }
            }

            // end of parse
            Console.WriteLine("{0} Samples were pulled from URLQuery.", count); 
        }

        private static List<string> GetAllBetween(string text, string start, string end)
        {
            // create regex expression 
            string regex = string.Format("{0}(.*?){1}", Regex.Escape(start), Regex.Escape(end));

            // return matches as a list 
            return Regex.Matches(text, regex, RegexOptions.Singleline)
                .Cast<Match>()
                .Select(match => match.Groups[1].Value)
                // converted to a list 
                .ToList(); 
        }

        private static string HTTP(string url)
        {
            // add http to string if required 
            if (!url.StartsWith("http://") || url.StartsWith("https://"))
            {
                url = "http://" + url;
            }

            return url;
        }
    }
}
